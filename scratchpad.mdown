Better performance through simplicity
"making an entire family of common and tedious hand optimization techniques obsolete"
David Nolen. "The Future of JavaScript MVC Frameworks"

Benefits:
+ server-side rendering


cohesion - colocate markup and component logic; and CSS, and data requirements.


---

React ist vielmehr:
React begeistert mich weil man ihm/ihr anmerkt, dass sie nach Einfachheit strebt und dabei neue Wege aufzeigt wie man UIs bauen kann - hat _alle_ anderen JS Lösungen beeinflusst.
+ gibt uns zu denken - fordert uns heraus - wir entdecken immer noch erst die Möglichkeiten die uns durch seine Ideen eröffnet werden
+ nimmt JS begeistert an und nutzt es wo's nur geht
+ was passiert (Verhalten/Programmfluss) ist leicht nachzuvollziehen / macht was man erwartet
+ modular, LEGO, nicht verknotet (-> einfach), unidirektionaler Datenfluss: Kindkomponenten erhalten Daten von Eltern aber nicht umgekehrt
+ virtueller DOM: DOM wird für mich wegabstrahiert
+ leicht in bestehende Projekte einzubinden, da man nicht die ganze Frontendarchitektur umstellen muss sondern gezielt nur einen Teil mit React bauen kann


1. jQuery: DOM as data store
2. Backbone: JavaScript data as single source of truth
3. Ember, Angular
4. React

???
Ember, Angular: easy - focus on programmer convenience, abstractions leak through, have to go at great lengths, not elegant under the hood
React: simple, abstractions don't leak through, easy to grasp, easy to reason about. elegance and simplicity > programmer convenience.
not a framework but part of a fexible toolbox

framework — A product with the business logic removed, but all of the assumptions left in.
[Devil’s Dictionary of Programming](http://programmingisterrible.com/post/65781074112/devils-dictionary-of-programming)

---

class: vertical-center vertical-center-large background-blue

.vertical-title[rendering]
f: data -> UI

???
+ seitdem wir **jQuery Spaghettiland** hinter uns gelassen haben modellieren wir UI-Logik mit **JS Daten** (DOM nicht mehr als Datenspeicher)

---

---
class: vertical-center vertical-center-large

rendering so far

???
jQuery: imperatives Spaghettifest mit dem DOM
Backbone: Templates, aber imperativer Code, der granulare nachträgliche Änderungen vornimmt
React: deklarativ, render-Funktion beschreibt wie die UI zu allen Zeiten auszusehen hat - was sie dank ständigem Neurendern auch tut.

---

JavaScript data -> DOM

prismatic example from Ian Davis

---

---

class: vertical-center
JavaScript _library_ for building UIs

---

component with JSX example

render method calls functions, embraces JS and its data structures - doesn't need models ("React quickly became known as the 'V' in MVC and people kept asking what do I use for the 'M' then? The answer is you don't need an 'M', you have JavaScript arrays and objects already.")

---

class: background-cover contents
background-image: url(images/Ricoh-GR-sample-images-3.jpg)

# Contents
0\. What is React?  
1. Demos  
2. Big Announcements  
3. Beyond React  

???

+ Demos: Ryan Florence's "Hype!" Vortrag
+ 2 große Ankündigungen: 1. React Native und 2. Relay & GraphQL
+ Beyond: Immutable.js, Om

---

---

JSX

???
use the power of JavaScript - no need for a DSL templating language
quite the opposite of logicless templating :)

className: b/c that's what it's called in the DOM specification - https://developer.mozilla.org/en-US/docs/Web/API/Element/className
htmlFor: same reason, https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement

---

Rendering
- Performance
- server-side rendering via node (Angular haben's aufgegeben)
- Einfachheit - ich muss weniger nachdenken wenn immer alles neu gerendert wird - weniger DOM state - keinen den ich manage
- früher: es gab klickpfade bei denen bestimmte sachen kaputt gingen - extrem schwer zu verwaltender view state - lese eine nachricht, eine neue kommt rein, dann klicke ich auf xxx und dann geht auf einmal yyy nicht mehr.

- nutzen JS wo's nur geht - [].map, inline styles etc.
- schneller einstieg, leicht granular einzubauen - kein riesen setup. schnell erste ergebnisse, fühlt sich gut an.

früher: jQuery - wieviele elemente der klasse .foo gibt es um zu wissen wieviele fotos im galerieslider sind
dann backbone - wie update ich nur den namen im DOM wenn ich nur ein event habe, dass der user sich geändert hat?

Template: so wie in vielen anderen JS Frameworks auch.
Problem: früher haben wir den DOM als Datenspeicher missbraucht - Datenattribute, Galleriekarussell bei dem wir den DOM mit `$('.galleryImage').length` abfragen wieviele Bilder gerade da sind.
Dann kam Backbone - Models als "single source of truth".
Problem weiterhin: wenn sich ein Teil des Models ändert wird alles komplett neu gerendert das auf Änderungen des Models hört
-> viel Code geschrieben um das zu umgehen / performanter zu machen.
Computer können das besser, wir sollten uns wegen sowas nicht den Kopf zerbrechen müssen - wird sehr schnell chaotisch und unbeherrschbar.

einfachste Lösung:
- bei Änderung am Model alles neu rendern, um alle Stellen im DOM zu aktualisieren
- ähnlich wie wenn Seiten auf dem Server gerendert werden
- bisher nicht sehr performant, ABER:
... virtueller DOM (nicht Shadow DOM)

muss mir als entwickler keine gedanken darum machen.

auch in react: ein model an mehrere views binden spannt viele stricke -> stores in flux / globalere date (Om)

JSX template mit state

präzisere updates
ich muss mich nicht drum kümmern

React:
- Rendering und Datenstrukturen sind Implementierungsdetails
  saubere, flexible Plattform auf die es aufzubauen lohnt
- geht mehr darum die Ideen zu vermitteln - wenn ihr alle morgen anfangt React zu nutzen bin ich sehr froh, aber wenn ihr immutable.js oder [virtual-dom](https://github.com/Matt-Esch/virtual-dom) in euren Projekten einsetzt bin ich auch froh :)

???
+ JavaScript Bibliothek von Facebook um User Interfaces zu bauen.
+ steckt in: Facebook, Instagram, Atom Editor, Flipboard, Airbnb, Atlassian Hipchat
+ kein MVC, "das _V_ in MVC"
+ funktional geprägt
+ inpsiriert von Rich Hickeys Einfachheitsbegriff (cf. [Simplicity matters](https://www.youtube.com/watch?v=rI8tNMsozo0))

class: vertical-center vertical-center-large background-blue

.vertical-title[rendering]

data -> rendering function -> virtual DOM -> DOM

---


